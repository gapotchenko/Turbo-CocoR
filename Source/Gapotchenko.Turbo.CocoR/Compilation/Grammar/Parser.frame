-->begin
#pragma warning disable IDE0005 // Using directive is unnecessary.
#pragma warning disable IDE0161 // Convert to file-scoped namespace

#nullable disable

-->namespace

class Parser
{
-->constants
	const bool _T = true;
	const bool _x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

-->declarations

	public Parser(Scanner scanner)
	{
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr(int n)
	{
		if (errDist >= minErrDist)
			errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SynErr(string msg)
	{
		if (errDist >= minErrDist)
			errors.SynErr(la.line, la.col, msg);
		errDist = 0;
	}

	public void SemErr(string msg)
	{
		if (errDist >= minErrDist)
			errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get()
	{
		for (;;)
		{
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT)
			{
				++errDist;
				break;
			}
-->pragmas
			la = t;
		}
	}
	
	void Expect(int n)
	{
		if (la.kind == n)
			Get();
		else
			SynErr(n);
	}
	
	bool StartOf(int s)
	{
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow)
	{
		if (la.kind == n)
		{
			Get();
		}
		else
		{
			SynErr(n);
			while (!StartOf(follow))
				Get();
		}
	}

	bool WeakSeparator(int n, int syFol, int repFol)
	{
		int kind = la.kind;
		if (kind == n)
		{
			Get();
			return true;
		}
		else if (StartOf(repFol))
		{
			return false;
		}
		else
		{
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind]))
			{
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
-->productions

	public void Parse() {
		la = new Token();
		Get();
-->parseRoot
	}
	
	static readonly bool[,] set =
	{
-->initialization
	};
} // end Parser


public class Errors
{
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public string FileName; 

	public virtual void SynErr(int line, int col, string s)
	{
		WriteError(line, col, s);
	}

	public virtual void SynErr(int line, int col, int n)
	{
		string s;
		switch (n)
		{
-->errors
			default:
				s = "error " + n;
				break;
		}
		SynErr(line, col, s);
	}

	public virtual void SemErr(int line, int col, string s)
	{
		WriteError(line, col, s);
	}

	void WriteError(int line, int column, string s)
	{
		Console.WriteLine($"{FileName}({line},{column}): error: {CapitalizeSentence(s)}");
		count++;
	}
	
	public virtual void SemErr(string s)
	{
        Console.WriteLine($"{FileName}: error: {CapitalizeSentence(s)}");
        count++;
	}
	
	static string CapitalizeSentence(string s)
	{
		if (string.IsNullOrEmpty(s))
			return s;
		return string.Concat(new ReadOnlySpan<char>(char.ToUpperInvariant(s[0])), s.AsSpan(1));
	}

	public virtual void Warning(int line, int col, string s)
	{
        Console.WriteLine($"{FileName}({line},{col}): warning: {CapitalizeSentence(s)}");
	}
		
	public virtual void Warning(string s)
	{
        Console.WriteLine($"{FileName}: warning: {CapitalizeSentence(s)}");
    }
} // end Errors
